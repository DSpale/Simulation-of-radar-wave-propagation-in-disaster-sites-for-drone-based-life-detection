#python:
class box_object:
  def __init__(self, A, B, C, D, material):
    self.A = np.array(A)
    self.B = np.array(B)
    self.C = np.array(C)
    self.D = np.array(D)
    self.center = self.A+(self.C-self.A)/2
    self.material = material

  def rotate(self, degrees):
    rot = np.array([[np.cos(degrees), -np.sin(degrees)], [np.sin(degrees), np.cos(degrees)]])
    self.A = rot@(self.A-self.center)+self.center
    self.B = rot@(self.B-self.center)+self.center
    self.C = rot@(self.C-self.center)+self.center
    self.D = rot@(self.D-self.center)+self.center

  def place(self):
     triangle(self.A[0], self.A[1], 0, self.B[0], self.B[1], 0, self.C[0], self.C[1], 0, 5e-4, self.material)
     triangle(self.B[0], self.B[1], 0, self.C[0], self.C[1], 0, self.D[0], self.D[1], 0, 5e-4, self.material)

from gprMax.input_cmd_funcs import *
import numpy as np
command('title', 'Reference measurement for MCCW simulation with no target''')

tsim = 20e-9 # Time window for the simulation

space_res = 5e-4 # Space discretization

# Domain size
x_domain_dim = 0.600
y_domain_dim = 1.100
z_domain_dim = space_res # Only 2D scan

domain = domain(x_domain_dim, y_domain_dim, z_domain_dim)
dx_dy_dz(space_res, space_res, space_res)
time_window(tsim)

# Use Hertzian dipole with ramped sine excitation
excitation = waveform('contsine', amplitude=1, frequency=1e9, identifier='excitation')
tx = hertzian_dipole('z', 0.350, 1.000, 0, excitation)
rx(0.250, 1.000, 0)
#end_python: