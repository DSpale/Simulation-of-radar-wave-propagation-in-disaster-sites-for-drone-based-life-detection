#python:
from gprMax.input_cmd_funcs import *
import numpy as np
command('title', 'MCCW simulation with obstructing box (plywood) - cylinder version''')

tsim = 20e-9 # Time window for the simulation

space_res = 5e-4 # Space discretization

# Domain size
x_domain_dim = 0.600
y_domain_dim = 1.100
z_domain_dim = space_res # Only 2D scan

domain = domain(x_domain_dim, y_domain_dim, z_domain_dim)
dx_dy_dz(space_res, space_res, space_res)
time_window(tsim)

# Assume "body fluid" as material for demonstrational purposes, ID = 48
# See https://web.corral.tacc.utexas.edu/AustinManEMVoxels/AustinMan/assumptions/Material_IDs_Properties.txt
# Material command:
#   Rel. Permittivity
#   Conductivity
#   Relative permeability (1 for non-magnetic materials)
#   Magnetic loss (0 for non-magnetic materials)
#   Identifier
material(permittivity=68.9, conductivity=1.636, permeability=1, magconductivity=0, name='BodyFluid')
material(permittivity=2.004, conductivity=1.993e-3, permeability=1, magconductivity=0, name='5_ply_plywood')

#end_python:
add_dispersion_debye(4 0.061 4.636e-12 0.117 1.281e-11 0.262 4.424e-11 0.436 2.396e-10 '5_ply_plywood')
#python:

excitation = waveform('contsine', amplitude=1, frequency=1e9, identifier='excitation')
tx = hertzian_dipole('z', 0.350, 1.000, 0, excitation)
rx(0.250, 1.000, 0)

# Change radius of cylinder to simulate breathing
radius_change = ((current_model_run - 1) * space_res) / 2
box(0, 0, 0, x_domain_dim, y_domain_dim, z_domain_dim, 'free_space')

# Obstructing plywood box
box(0.010, 0.020, 0, 0.590, 0.590, z_domain_dim, '5_ply_plywood')
box(0.020, 0.030, 0, 0.580, 0.580, z_domain_dim, 'free_space')

cylinder(0.300, 0.300, 0, 0.300, 0.300, z_domain_dim, 0.200 + radius_change, 'BodyFluid')

# Geometry view, normal mode (n)
geometry_view(0, 0, 0, x_domain_dim, y_domain_dim, z_domain_dim, space_res, space_res, space_res, 'geomV', 'n')

# Generate snapshots of model run
if current_model_run == 10:
    N = 100
    for i in range(1, N+1):
        snapshot(0, 0, 0, domain.x, domain.y, domain.z, space_res, space_res, space_res, i*(0.6*tsim/N), 'snapshot' + str(i))

#end_python: